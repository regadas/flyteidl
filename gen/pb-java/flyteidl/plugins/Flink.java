// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/flink.proto

package flyteidl.plugins;

public final class Flink {
  private Flink() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface FlinkJobOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.plugins.FlinkJob)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string jarFile = 1;</code>
     */
    java.lang.String getJarFile();
    /**
     * <code>string jarFile = 1;</code>
     */
    com.google.protobuf.ByteString
        getJarFileBytes();

    /**
     * <code>string mainClass = 2;</code>
     */
    java.lang.String getMainClass();
    /**
     * <code>string mainClass = 2;</code>
     */
    com.google.protobuf.ByteString
        getMainClassBytes();

    /**
     * <code>repeated string args = 3;</code>
     */
    java.util.List<java.lang.String>
        getArgsList();
    /**
     * <code>repeated string args = 3;</code>
     */
    int getArgsCount();
    /**
     * <code>repeated string args = 3;</code>
     */
    java.lang.String getArgs(int index);
    /**
     * <code>repeated string args = 3;</code>
     */
    com.google.protobuf.ByteString
        getArgsBytes(int index);

    /**
     * <code>map&lt;string, string&gt; flinkProperties = 4;</code>
     */
    int getFlinkPropertiesCount();
    /**
     * <code>map&lt;string, string&gt; flinkProperties = 4;</code>
     */
    boolean containsFlinkProperties(
        java.lang.String key);
    /**
     * Use {@link #getFlinkPropertiesMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getFlinkProperties();
    /**
     * <code>map&lt;string, string&gt; flinkProperties = 4;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getFlinkPropertiesMap();
    /**
     * <code>map&lt;string, string&gt; flinkProperties = 4;</code>
     */

    java.lang.String getFlinkPropertiesOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <code>map&lt;string, string&gt; flinkProperties = 4;</code>
     */

    java.lang.String getFlinkPropertiesOrThrow(
        java.lang.String key);
  }
  /**
   * <pre>
   * Custom Proto for Flink Plugin.
   * </pre>
   *
   * Protobuf type {@code flyteidl.plugins.FlinkJob}
   */
  public  static final class FlinkJob extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.plugins.FlinkJob)
      FlinkJobOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use FlinkJob.newBuilder() to construct.
    private FlinkJob(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FlinkJob() {
      jarFile_ = "";
      mainClass_ = "";
      args_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private FlinkJob(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              jarFile_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              mainClass_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                args_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000004;
              }
              args_.add(s);
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) != 0)) {
                flinkProperties_ = com.google.protobuf.MapField.newMapField(
                    FlinkPropertiesDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000008;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              flinkProperties__ = input.readMessage(
                  FlinkPropertiesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              flinkProperties_.getMutableMap().put(
                  flinkProperties__.getKey(), flinkProperties__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          args_ = args_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return flyteidl.plugins.Flink.internal_static_flyteidl_plugins_FlinkJob_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 4:
          return internalGetFlinkProperties();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return flyteidl.plugins.Flink.internal_static_flyteidl_plugins_FlinkJob_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              flyteidl.plugins.Flink.FlinkJob.class, flyteidl.plugins.Flink.FlinkJob.Builder.class);
    }

    private int bitField0_;
    public static final int JARFILE_FIELD_NUMBER = 1;
    private volatile java.lang.Object jarFile_;
    /**
     * <code>string jarFile = 1;</code>
     */
    public java.lang.String getJarFile() {
      java.lang.Object ref = jarFile_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        jarFile_ = s;
        return s;
      }
    }
    /**
     * <code>string jarFile = 1;</code>
     */
    public com.google.protobuf.ByteString
        getJarFileBytes() {
      java.lang.Object ref = jarFile_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        jarFile_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MAINCLASS_FIELD_NUMBER = 2;
    private volatile java.lang.Object mainClass_;
    /**
     * <code>string mainClass = 2;</code>
     */
    public java.lang.String getMainClass() {
      java.lang.Object ref = mainClass_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        mainClass_ = s;
        return s;
      }
    }
    /**
     * <code>string mainClass = 2;</code>
     */
    public com.google.protobuf.ByteString
        getMainClassBytes() {
      java.lang.Object ref = mainClass_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mainClass_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ARGS_FIELD_NUMBER = 3;
    private com.google.protobuf.LazyStringList args_;
    /**
     * <code>repeated string args = 3;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getArgsList() {
      return args_;
    }
    /**
     * <code>repeated string args = 3;</code>
     */
    public int getArgsCount() {
      return args_.size();
    }
    /**
     * <code>repeated string args = 3;</code>
     */
    public java.lang.String getArgs(int index) {
      return args_.get(index);
    }
    /**
     * <code>repeated string args = 3;</code>
     */
    public com.google.protobuf.ByteString
        getArgsBytes(int index) {
      return args_.getByteString(index);
    }

    public static final int FLINKPROPERTIES_FIELD_NUMBER = 4;
    private static final class FlinkPropertiesDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  flyteidl.plugins.Flink.internal_static_flyteidl_plugins_FlinkJob_FlinkPropertiesEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> flinkProperties_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetFlinkProperties() {
      if (flinkProperties_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            FlinkPropertiesDefaultEntryHolder.defaultEntry);
      }
      return flinkProperties_;
    }

    public int getFlinkPropertiesCount() {
      return internalGetFlinkProperties().getMap().size();
    }
    /**
     * <code>map&lt;string, string&gt; flinkProperties = 4;</code>
     */

    public boolean containsFlinkProperties(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetFlinkProperties().getMap().containsKey(key);
    }
    /**
     * Use {@link #getFlinkPropertiesMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getFlinkProperties() {
      return getFlinkPropertiesMap();
    }
    /**
     * <code>map&lt;string, string&gt; flinkProperties = 4;</code>
     */

    public java.util.Map<java.lang.String, java.lang.String> getFlinkPropertiesMap() {
      return internalGetFlinkProperties().getMap();
    }
    /**
     * <code>map&lt;string, string&gt; flinkProperties = 4;</code>
     */

    public java.lang.String getFlinkPropertiesOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetFlinkProperties().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, string&gt; flinkProperties = 4;</code>
     */

    public java.lang.String getFlinkPropertiesOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetFlinkProperties().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getJarFileBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, jarFile_);
      }
      if (!getMainClassBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, mainClass_);
      }
      for (int i = 0; i < args_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, args_.getRaw(i));
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetFlinkProperties(),
          FlinkPropertiesDefaultEntryHolder.defaultEntry,
          4);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getJarFileBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, jarFile_);
      }
      if (!getMainClassBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, mainClass_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < args_.size(); i++) {
          dataSize += computeStringSizeNoTag(args_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getArgsList().size();
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetFlinkProperties().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        flinkProperties__ = FlinkPropertiesDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, flinkProperties__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof flyteidl.plugins.Flink.FlinkJob)) {
        return super.equals(obj);
      }
      flyteidl.plugins.Flink.FlinkJob other = (flyteidl.plugins.Flink.FlinkJob) obj;

      if (!getJarFile()
          .equals(other.getJarFile())) return false;
      if (!getMainClass()
          .equals(other.getMainClass())) return false;
      if (!getArgsList()
          .equals(other.getArgsList())) return false;
      if (!internalGetFlinkProperties().equals(
          other.internalGetFlinkProperties())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + JARFILE_FIELD_NUMBER;
      hash = (53 * hash) + getJarFile().hashCode();
      hash = (37 * hash) + MAINCLASS_FIELD_NUMBER;
      hash = (53 * hash) + getMainClass().hashCode();
      if (getArgsCount() > 0) {
        hash = (37 * hash) + ARGS_FIELD_NUMBER;
        hash = (53 * hash) + getArgsList().hashCode();
      }
      if (!internalGetFlinkProperties().getMap().isEmpty()) {
        hash = (37 * hash) + FLINKPROPERTIES_FIELD_NUMBER;
        hash = (53 * hash) + internalGetFlinkProperties().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static flyteidl.plugins.Flink.FlinkJob parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.plugins.Flink.FlinkJob parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.plugins.Flink.FlinkJob parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.plugins.Flink.FlinkJob parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.plugins.Flink.FlinkJob parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.plugins.Flink.FlinkJob parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.plugins.Flink.FlinkJob parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.plugins.Flink.FlinkJob parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.plugins.Flink.FlinkJob parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static flyteidl.plugins.Flink.FlinkJob parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.plugins.Flink.FlinkJob parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.plugins.Flink.FlinkJob parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(flyteidl.plugins.Flink.FlinkJob prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Custom Proto for Flink Plugin.
     * </pre>
     *
     * Protobuf type {@code flyteidl.plugins.FlinkJob}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.plugins.FlinkJob)
        flyteidl.plugins.Flink.FlinkJobOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return flyteidl.plugins.Flink.internal_static_flyteidl_plugins_FlinkJob_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 4:
            return internalGetFlinkProperties();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 4:
            return internalGetMutableFlinkProperties();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return flyteidl.plugins.Flink.internal_static_flyteidl_plugins_FlinkJob_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                flyteidl.plugins.Flink.FlinkJob.class, flyteidl.plugins.Flink.FlinkJob.Builder.class);
      }

      // Construct using flyteidl.plugins.Flink.FlinkJob.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        jarFile_ = "";

        mainClass_ = "";

        args_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        internalGetMutableFlinkProperties().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return flyteidl.plugins.Flink.internal_static_flyteidl_plugins_FlinkJob_descriptor;
      }

      @java.lang.Override
      public flyteidl.plugins.Flink.FlinkJob getDefaultInstanceForType() {
        return flyteidl.plugins.Flink.FlinkJob.getDefaultInstance();
      }

      @java.lang.Override
      public flyteidl.plugins.Flink.FlinkJob build() {
        flyteidl.plugins.Flink.FlinkJob result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public flyteidl.plugins.Flink.FlinkJob buildPartial() {
        flyteidl.plugins.Flink.FlinkJob result = new flyteidl.plugins.Flink.FlinkJob(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.jarFile_ = jarFile_;
        result.mainClass_ = mainClass_;
        if (((bitField0_ & 0x00000004) != 0)) {
          args_ = args_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.args_ = args_;
        result.flinkProperties_ = internalGetFlinkProperties();
        result.flinkProperties_.makeImmutable();
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof flyteidl.plugins.Flink.FlinkJob) {
          return mergeFrom((flyteidl.plugins.Flink.FlinkJob)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(flyteidl.plugins.Flink.FlinkJob other) {
        if (other == flyteidl.plugins.Flink.FlinkJob.getDefaultInstance()) return this;
        if (!other.getJarFile().isEmpty()) {
          jarFile_ = other.jarFile_;
          onChanged();
        }
        if (!other.getMainClass().isEmpty()) {
          mainClass_ = other.mainClass_;
          onChanged();
        }
        if (!other.args_.isEmpty()) {
          if (args_.isEmpty()) {
            args_ = other.args_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureArgsIsMutable();
            args_.addAll(other.args_);
          }
          onChanged();
        }
        internalGetMutableFlinkProperties().mergeFrom(
            other.internalGetFlinkProperties());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        flyteidl.plugins.Flink.FlinkJob parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (flyteidl.plugins.Flink.FlinkJob) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object jarFile_ = "";
      /**
       * <code>string jarFile = 1;</code>
       */
      public java.lang.String getJarFile() {
        java.lang.Object ref = jarFile_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          jarFile_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string jarFile = 1;</code>
       */
      public com.google.protobuf.ByteString
          getJarFileBytes() {
        java.lang.Object ref = jarFile_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          jarFile_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string jarFile = 1;</code>
       */
      public Builder setJarFile(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        jarFile_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string jarFile = 1;</code>
       */
      public Builder clearJarFile() {
        
        jarFile_ = getDefaultInstance().getJarFile();
        onChanged();
        return this;
      }
      /**
       * <code>string jarFile = 1;</code>
       */
      public Builder setJarFileBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        jarFile_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mainClass_ = "";
      /**
       * <code>string mainClass = 2;</code>
       */
      public java.lang.String getMainClass() {
        java.lang.Object ref = mainClass_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          mainClass_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string mainClass = 2;</code>
       */
      public com.google.protobuf.ByteString
          getMainClassBytes() {
        java.lang.Object ref = mainClass_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mainClass_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string mainClass = 2;</code>
       */
      public Builder setMainClass(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        mainClass_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string mainClass = 2;</code>
       */
      public Builder clearMainClass() {
        
        mainClass_ = getDefaultInstance().getMainClass();
        onChanged();
        return this;
      }
      /**
       * <code>string mainClass = 2;</code>
       */
      public Builder setMainClassBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        mainClass_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList args_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureArgsIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          args_ = new com.google.protobuf.LazyStringArrayList(args_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated string args = 3;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getArgsList() {
        return args_.getUnmodifiableView();
      }
      /**
       * <code>repeated string args = 3;</code>
       */
      public int getArgsCount() {
        return args_.size();
      }
      /**
       * <code>repeated string args = 3;</code>
       */
      public java.lang.String getArgs(int index) {
        return args_.get(index);
      }
      /**
       * <code>repeated string args = 3;</code>
       */
      public com.google.protobuf.ByteString
          getArgsBytes(int index) {
        return args_.getByteString(index);
      }
      /**
       * <code>repeated string args = 3;</code>
       */
      public Builder setArgs(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureArgsIsMutable();
        args_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string args = 3;</code>
       */
      public Builder addArgs(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureArgsIsMutable();
        args_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string args = 3;</code>
       */
      public Builder addAllArgs(
          java.lang.Iterable<java.lang.String> values) {
        ensureArgsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, args_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string args = 3;</code>
       */
      public Builder clearArgs() {
        args_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string args = 3;</code>
       */
      public Builder addArgsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureArgsIsMutable();
        args_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> flinkProperties_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetFlinkProperties() {
        if (flinkProperties_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              FlinkPropertiesDefaultEntryHolder.defaultEntry);
        }
        return flinkProperties_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableFlinkProperties() {
        onChanged();;
        if (flinkProperties_ == null) {
          flinkProperties_ = com.google.protobuf.MapField.newMapField(
              FlinkPropertiesDefaultEntryHolder.defaultEntry);
        }
        if (!flinkProperties_.isMutable()) {
          flinkProperties_ = flinkProperties_.copy();
        }
        return flinkProperties_;
      }

      public int getFlinkPropertiesCount() {
        return internalGetFlinkProperties().getMap().size();
      }
      /**
       * <code>map&lt;string, string&gt; flinkProperties = 4;</code>
       */

      public boolean containsFlinkProperties(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetFlinkProperties().getMap().containsKey(key);
      }
      /**
       * Use {@link #getFlinkPropertiesMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getFlinkProperties() {
        return getFlinkPropertiesMap();
      }
      /**
       * <code>map&lt;string, string&gt; flinkProperties = 4;</code>
       */

      public java.util.Map<java.lang.String, java.lang.String> getFlinkPropertiesMap() {
        return internalGetFlinkProperties().getMap();
      }
      /**
       * <code>map&lt;string, string&gt; flinkProperties = 4;</code>
       */

      public java.lang.String getFlinkPropertiesOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetFlinkProperties().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, string&gt; flinkProperties = 4;</code>
       */

      public java.lang.String getFlinkPropertiesOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetFlinkProperties().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearFlinkProperties() {
        internalGetMutableFlinkProperties().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; flinkProperties = 4;</code>
       */

      public Builder removeFlinkProperties(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableFlinkProperties().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableFlinkProperties() {
        return internalGetMutableFlinkProperties().getMutableMap();
      }
      /**
       * <code>map&lt;string, string&gt; flinkProperties = 4;</code>
       */
      public Builder putFlinkProperties(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableFlinkProperties().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; flinkProperties = 4;</code>
       */

      public Builder putAllFlinkProperties(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableFlinkProperties().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.plugins.FlinkJob)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.plugins.FlinkJob)
    private static final flyteidl.plugins.Flink.FlinkJob DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new flyteidl.plugins.Flink.FlinkJob();
    }

    public static flyteidl.plugins.Flink.FlinkJob getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FlinkJob>
        PARSER = new com.google.protobuf.AbstractParser<FlinkJob>() {
      @java.lang.Override
      public FlinkJob parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FlinkJob(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FlinkJob> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FlinkJob> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public flyteidl.plugins.Flink.FlinkJob getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_plugins_FlinkJob_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_plugins_FlinkJob_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_plugins_FlinkJob_FlinkPropertiesEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_plugins_FlinkJob_FlinkPropertiesEntry_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\034flyteidl/plugins/flink.proto\022\020flyteidl" +
      ".plugins\"\276\001\n\010FlinkJob\022\017\n\007jarFile\030\001 \001(\t\022\021" +
      "\n\tmainClass\030\002 \001(\t\022\014\n\004args\030\003 \003(\t\022H\n\017flink" +
      "Properties\030\004 \003(\0132/.flyteidl.plugins.Flin" +
      "kJob.FlinkPropertiesEntry\0326\n\024FlinkProper" +
      "tiesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028" +
      "\001B5Z3github.com/lyft/flyteidl/gen/pb-go/" +
      "flyteidl/pluginsb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_flyteidl_plugins_FlinkJob_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_flyteidl_plugins_FlinkJob_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_plugins_FlinkJob_descriptor,
        new java.lang.String[] { "JarFile", "MainClass", "Args", "FlinkProperties", });
    internal_static_flyteidl_plugins_FlinkJob_FlinkPropertiesEntry_descriptor =
      internal_static_flyteidl_plugins_FlinkJob_descriptor.getNestedTypes().get(0);
    internal_static_flyteidl_plugins_FlinkJob_FlinkPropertiesEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_plugins_FlinkJob_FlinkPropertiesEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
